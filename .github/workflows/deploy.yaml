name: Deploy image to GHCR ü™Ç

env:
  REGISTRY: ghcr.io

on:
  repository_dispatch:
    types:
      - scheduled
  workflow_dispatch:
    inputs:
      distribution:
        description: Rocker Distro Name. Eg. rstudio
        required: true
        type: choice
        default: rstudio
        options:
          - rstudio
          - rstudio-local
      r_version:
        description: R Version
        required: true
        type: choice
        default: "4.2.0"
        options:
          - "4.1.0"
          - "4.1.1"
          - "4.1.2"
          - "4.1.3"
          - "4.2.0"
      bioc_version:
        description: BioConductor Release
        required: true
        type: choice
        default: "3.15"
        options:
          - "3.13"
          - "3.14"
          - "3.15"
      tag:
        description: |
          Custom Image Tag/Version. Defaults to current date in the `YYYY.MM.DD` format if unspecified.
        required: false
        default: ""
      tag_latest:
        description: Tag image as `latest`
        default: false
        type: boolean

jobs:
  normalize-inputs:
    name: Normalize inputs üßπ
    runs-on: ubuntu-latest
    steps:
      - name: Normalize üßΩ
        id: normalizer
        run: |
          function normalize() {
            local var=$1
            if [ "$var" == "" ]
            then {
              var=$2
            }
            fi
            echo ${var}
          }
          DISTRIBUTION=$(normalize ${{ github.event.inputs.distribution }} ${{ github.event.client_payload.distribution }})
          R_VERSION=$(normalize ${{ github.event.inputs.r_version }} ${{ github.event.client_payload.r_version }})
          BIOC_VERSION=$(normalize ${{ github.event.inputs.bioc_version }} ${{ github.event.client_payload.bioc_version }})
          TAG=$(normalize ${{ github.event.inputs.tag }} ${{ github.event.client_payload.tag }})
          TAG_LATEST=$(normalize ${{ github.event.inputs.tag_latest }} ${{ github.event.client_payload.tag_latest }})
          echo "::set-output name=DISTRIBUTION::$DISTRIBUTION"
          echo "::set-output name=R_VERSION::$R_VERSION"
          echo "::set-output name=BIOC_VERSION::$BIOC_VERSION"
          echo "::set-output name=TAG::$TAG"
          echo "::set-output name=TAG_LATEST::$TAG_LATEST"
        shell: bash
    outputs:
      distribution: ${{ steps.normalizer.outputs.DISTRIBUTION }}
      r_version: ${{ steps.normalizer.outputs.R_VERSION }}
      bioc_version: ${{ steps.normalizer.outputs.BIOC_VERSION }}
      tag: ${{ steps.normalizer.outputs.TAG }}
      tag_latest: ${{ steps.normalizer.outputs.TAG_LATEST }}

  build:
    runs-on: ubuntu-latest
    needs: normalize-inputs
    name: Build & Deploy üöÄ ${{ needs.normalize-inputs.outputs.distribution }} - ${{ needs.normalize-inputs.outputs.r_version }} | BioC - ${{ needs.normalize-inputs.outputs.bioc_version }}

    # Token permissions
    permissions:
      contents: read
      packages: write

    # Build steps
    steps:
      - name: Checkout repository üí≥
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      - name: Cache Docker layers ‚ôªÔ∏è
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ needs.normalize-inputs.outputs.distribution }}-${{ needs.normalize-inputs.outputs.r_version }}-${{ needs.normalize-inputs.outputs.bioc_version }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ needs.normalize-inputs.outputs.distribution }}-${{ needs.normalize-inputs.outputs.r_version }}-${{ needs.normalize-inputs.outputs.bioc_version }}
            ${{ runner.os }}-buildx-${{ needs.normalize-inputs.outputs.distribution }}-${{ needs.normalize-inputs.outputs.r_version }}-
            ${{ runner.os }}-buildx-${{ needs.normalize-inputs.outputs.distribution }}-
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry üóù
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build variables üìê
        id: build_vars
        run: |
          # Set Image name
          image_name="${{ needs.normalize-inputs.outputs.distribution }}_${{ needs.normalize-inputs.outputs.r_version }}_bioc_${{ needs.normalize-inputs.outputs.bioc_version }}"

          # Set default tag as 'YYYY.MM.DD' date if it isn't set
          tag="${{ needs.normalize-inputs.outputs.tag }}"
          if [ "${tag}" == "" ]
          then {
            tag=$(date +%Y.%m.%d)
          }
          fi

          tag_latest="${{ needs.normalize-inputs.outputs.tag_latest }}"

          # Set full image name
          full_names="${{ env.REGISTRY }}/${{ github.repository_owner }}/${image_name}:${tag}"
          if [ "${tag_latest}" == "true" ]
          then
            full_names="$full_names,${{ env.REGISTRY }}/${{ github.repository_owner }}/${image_name}:latest"
          fi
          echo "::set-output name=FULL_NAMES::${full_names}"

          echo "github.ref = ${{ github.ref }}"
          # Set push if branch is main
          if [ "${{ github.ref }}" == 'refs/heads/main' ]; then
            echo "::set-output name=DOCKER_PUSH::true"
            echo "DOCKER_PUSH = true"
          else
            echo "::set-output name=DOCKER_PUSH::false"
            echo "DOCKER_PUSH = false"
          fi

      - name: Build and push image üèó
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: Dockerfile
          push: ${{ steps.build_vars.outputs.DOCKER_PUSH }}
          tags: ${{ steps.build_vars.outputs.FULL_NAMES }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            DISTRIBUTION=${{ needs.normalize-inputs.outputs.distribution }}
            R_VERSION=${{ needs.normalize-inputs.outputs.r_version }}
            BIOC_VERSION=${{ needs.normalize-inputs.outputs.bioc_version }}

      - name: Move cache ‚ôªÔ∏è
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.5.0
        with:
          image-ref: ${{ steps.build_vars.outputs.FULL_NAMES }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

