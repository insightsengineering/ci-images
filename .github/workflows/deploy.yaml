name: Deploy image to GHCR

env:
  REGISTRY: ghcr.io

on:
  workflow_dispatch:
    inputs:
      distribution:
        description: Rocker Distro Name. Eg. tidyverse
        required: true
      r_version:
        description: R Version
        required: true
      bioc_version:
        description: BioConductor Release
        required: true
      tag:
        description: Image Tag/Version
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build & Deploy 🚀 ${{ github.event.inputs.distribution }} - ${{ github.event.inputs.r_version }} | BioC - ${{ github.event.inputs.bioc_version }}

    # Token permissions
    permissions:
      contents: read
      packages: write

    # Build steps
    steps:
      - name: Checkout repository 💳
        uses: actions/checkout@v2

      - name: Log in to the Container registry 🗝
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build variables 📐
        id: build_vars
        run: |
          # Infer Image name
          image_name="${{ github.event.inputs.distribution }}_${{ github.event.inputs.r_version }}_bioc_${{ github.event.inputs.bioc_version }}"

          # Infer Dockerfile name
          dockerfile="Dockerfile_${image_name}"
          echo "::set-output name=DOCKERFILE::${dockerfile}"

          # Set default tag as short SHA if it isn't set
          tag="${{ github.event.inputs.tag }}"
          if [ "${tag}" == "" ]
          then {
            tag="$(echo ${GITHUB_SHA} | cut -c1-8)"
          }
          fi

          # Set full image name
          full_name="${{ env.REGISTRY }}/${{ github.repository_owner }}/${image_name}:${tag}"
          echo "::set-output name=FULL_IMAGE_NAME::${full_name}"

      - name: Build image 🏗
        run: |
          cd dockerfiles

          # Catch bad inputs
          if [ ! -f "${{ steps.build_vars.outputs.DOCKERFILE }}" ]
          then {
            echo "No such Dockerfile: ${{ steps.build_vars.outputs.DOCKERFILE }}!"
            echo "Check your inputs or create the Dockerfile"
            exit 1
          }
          fi

          # Build the image
          docker build \
            -t ${{ steps.build_vars.outputs.FULL_IMAGE_NAME }} \
            -f ${{ steps.build_vars.outputs.DOCKERFILE }} .
        shell: bash

      - name: Push image 🪂
        run: docker push ${{ steps.build_vars.outputs.FULL_IMAGE_NAME }}
        shell: bash      
